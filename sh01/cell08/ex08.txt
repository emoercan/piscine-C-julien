! ATTENTION ! Il faut installer la commande bc

Pour cygwin :
Cliquer sur setup-x86_64.exe
Suivant
Installer depuis internet
Suivant x3
Sélectionner un lien miroir de téléchargement (n'importe lequel)
Suivant
Chercher bc
Cliquer sur la flèche à droite de Voir En attente, sélectionner Non installé
Chercher bc, cliquer sur la flèche à droite de Passe (sous Nouveau), sélectionner la dernière version (1.07.1-1 par exemple)

Terminer l'installation

Pour Ubunutu :
apt install bc

export FT_NBR1="\'?\"\\\"'\\"	// initialise la variable FT_NBR1 avec \'?"\"'\
				// on entoure la chaîne de caractères spéciaux de guillemets doubles et on échappe les guillemets doubles et les antislashs avec un antislash


				// FT_NBR1 est en base '\"?!
				// cela signifie que :
				// ' = 0
				// \ = 1
				// " = 2
				// ? = 3
				// ! = 4

echo $FT_NBR1 | sed -e "s/'/0/g" -e 's/\\/1/g' -e 's/"/2/g' -e 's/?/3/g' -e 's/!/4/g'

// on convertit ' en 0 (on utilise les guillemets doubles au lieu des guillemets simples ici pour éviter un message d'erreur, la commande serait mal interprétée sinon), \ en 1 // (en échappant l'antislash par un antislash), puis " par 2, ? par 3 et ! par 4
// on utilise pour cela sed avec s pour indiquer une substitution, g pour indiquer que substituer les caractères de manière globale, dans toute la chaîne de caractère contenue // dans FT_NBR1 (pas seulement la première occurence)
// on utilise sed avec l'option -e pour exécuter plusieurs commandes sed (-e indique d'ajouter le script à la liste de commandes devant être exécutées par sed)

// on peut aussi utiliser la commande (moins lisible mais plus courte) : echo $FT_NBR1 | sed -e "s/'/0/g" -e 'y/\\"?!/1234/'
// y indique de remplacer les caractères entre le premier et le deuxième slash par ceux entre le deuxième et le troisième slash (note : on échappe l'antislash)
// de même, \ sera remplacé par 1, " par 2, ? par 3 et ! par 4

// résultat : \'?"\"'\ sera traduit par 
//	      10321201

On convertit le résultat de base 5 (5 caractères) en base 13 (13 caractères)

export FT_NBR2="rcrdmddd"	// initialise la variable FT_NBR2 avec rcrdmddd

				// FT_NBR2 est en base mrdoc
				// cela signifie que :
				// m = 0
				// r = 1
				// d = 2
				// o = 3
				// c = 4

echo $FT_NBR2 | sed 'y/mrdoc/01234/'	// on remplace m par 0, r par 1, d par 2, o par 3 et c par 4 

// on peut aussi utiliser la commande tr au lieu de sed pour cela : echo $FT_NBR2 | tr 'mrdoc' '01234'

// résultat : rcrdmddd sera traduit par 
//	      14120222

// on commence par combiner les 2 premières commandes obtenues pour faire la somme de la valeur numérique de FT_NBR1 et de celle de FT_NBR2


echo $FT_NBR1 + $FT_NBR2 | sed -e "s/'/0/g" -e 's/\\/1/g' -e 's/"/2/g' -e 's/?/3/g' -e 's/!/4/g' | sed 'y/mrdoc/01234/'

// résultat : 10321201 + 14120222

// on veut calculer la somme de ces deux nombres et les convertir en base gtaio luSnmef
// FT_NBR1 est en base '\"?! donc en base 5 numériquement (car 5 symboles caractères (' \ " ? et !) sont utilisés pour donner 5 symboles numériques (0 1 2 3 et 4)
// FT_NBR2 est en base mrdoc, donc en base 5 numériquement
// on veut obtenir un résultat en base gtaio luSnmef, donc en base 13 numériquement ; 13 symboles caractères (g t a i o ' ' (l'espace) l u S n m e et f) sont utilisés pour
// donner 13 symboles (0 1 2 3 4 5 6 7 8 9 A B C)

// on utilise la commande bc pour faire à la fois la somme en base 5 (car ce n'est pas une addition normale décimale) de la valeur numérique de FT_NBR1 et de celle de FT_NBR2
// et pour convertir cette somme en base 13
// pour cela, on fait passe à la commande bc (sous forme de script) :
	// la base dans laquelle on voudra convertir le résultat du calcul, obase (output base)
		// on veut convertir le résultat du calcul en base 13, on écrit donc obase=13
	// la base dans laquelle sont les valeurs utilisées pour le calcul, ibase (input base)
		// les valeurs 10321201 et 14120222 sont en en base 5, on écrit donc ibase=5
	// enfin, l'opération à effectuer

echo "obase=13 ; ibase=5 ; 10321201 + 14120222" | bc

// résultat : 82671

// on utilise la commande xargs (commande permettant de construire d'exécuter des lignes de commandes à partir de l'input standard)
// pour faire passer la commande donnant comme résultat 10321201 + 14120222 à la commande précédente

echo $FT_NBR1 + $FT_NBR2 | sed -e "s/'/0/g" -e 's/\\/1/g' -e 's/"/2/g' -e 's/?/3/g' -e 's/!/4/g' | sed 'y/mrdoc/01234/' | xargs echo "obase=13 ; ibase=5 ; 10321201 + 14120222" | bc

// résultat : 82671

// enfin, on doit convertir ce résultat en base gtaio luSnmef
				// cela signifie que :
				// g = 0
				// t = 1
				// a = 2
				// i = 3
				// o = 4
				//   = 5
				// l = 6
				// u = 7
				// S = 8
				// n = 9
				// e = A
				// m = B
				// f = C


// on utilise la commande tr '0123456789ABC' 'gtaio luSnemf' pour convertir le résultat en base gtaio luSnmef

echo $FT_NBR1 + $FT_NBR2 | sed -e "s/'/0/g" -e 's/\\/1/g' -e 's/"/2/g' -e 's/?/3/g' -e 's/!/4/g' | sed 'y/mrdoc/01234/' | xargs echo "obase=13 ; ibase=5 ; 10321201 + 14120222" | bc | tr '0123456789ABC' 'gtaio luSnemf'

// résultat : 82671 sera traduit par 
//	      Salut



// Exemple 2 :

export $FT_NBR1='\"\"!\"\"!\"\"!\"\"!\"\"!\"\"'

// résultat : \"\"!\"\"!\"\"!\"\"!\"\"!\"\" sera traduit par 
//	      12124121241212412124121241212

export $FT_NBR2='dcrcmcmooododmrrrmorcmcrmomo'

// résultat : dcrcmcmooododmrrrmorcmcrmomo sera traduit par 
// 	      2414040333232011103140410303

// résultat de 12124121241212412124121241212 + 2414040333232011103140410303 de la base 5 à la base 13 : 8A0BA91213495C2761

// résultat : 8A0BA91213495C2761 sera traduit par
// 	      Segmentation fault

vim add_chelou.sh
i
#!/bin/sh	// ou #!/bin/bash
enter
echo $FT_NBR1 + $FT_NBR2 | sed -e "s/'/0/g" -e 's/\\/1/g' -e 's/"/2/g' -e 's/?/3/g' -e 's/!/4/g' | sed 'y/mrdoc/01234/' | xargs echo "obase=13 ; ibase=5 ; 10321201 + 14120222" | bc | tr '0123456789ABC' 'gtaio luSnemf'
echap
:wq
enter

chmod +x add_chelou.sh

./add_chelou.sh