cd shell00		// navigue vers le répertoire shell00
mkdir ex06		// créée le dossier ex06
cd ex06			// navigue vers le répertoire ex06

git init		// transforme le répertoire courant en répertoire git (git repository)

echo ".DS_Store" > .gitignore 	// le fichier .gitignore, placé à la racine d'un répertoire git, doit contenir la liste des fichiers qui doivent être ignorés par git (ils ne 					// seront pas ajoutés aux commits de ce répertoire, même avec git add . (qui ajoute normalement tous les fichiers du répertoire courant dans le 				// prochain commit))		
			// le fichier .DS_Store est un fichier spécifique à macOS : c'est un fichier caché qui stocke des informations sur des paramètres spécifiques au 				// répertoire (disposition des icônes, taille des fenêtres, etc)
			// ces fichiers doivent donc être ignorés par git

echo "*~" >> .gitignore	// exclus tous les fichiers se terminant par ~ (* : wildcard, remplace n'importe quelle suite de caractères)
			// on utilise >> pour écrire à la suite du fichier .gitignore, sur une nouvelle ligne (et ne pas écraser ce qu'il contenait déjà)

			// un fichier se terminant par ~ est un fichier de sauvegarde automatique (fichier temporaire), pour prévenir la perte de données en cas de problème
			// il porte le même nom que le fichier original, suivi de ~
			// ces fichiers doivent donc aussi être ignorés par git
touch .DS_Store		// crée le fichier .DS_Store
touch mywork.c		// crée le fichier mywork.c
touch mywork.c~		// crée le fichier mywork.c~

git add .		// on ajoute tous les fichiers du répertoire courant (mywork.c) au commit (sauf les fichiers infiqués dans le gitignore)
git commit -m "gitignore"	// on commit ; le résultat devrait être :
				// 2 files changed, 2 insertions(+)
				// create mode 100644 .gitignore
				// create mode 100644 mywork.c

git ls-files -io --exclude-standard		// liste tous les fichiers existants ignorés par git
						// ls-files indique à git d'afficher des informations sur les fichiers suivis par git
						// -i indique de montrer les fichiers ignorés (en incluant les fichiers correspondant aux règles locales (de .gitignore) 							// et aux règles globales de fichiers à ignorer par git)
						// -o indique d'inclure les fichiers non suivis (others), c'est-à-dire les fichiers qui ne sont pas encore suivis par git
						// --exclude-standard indique de ne pas lister les fichiers ignorés par les règles globales de git (seulement ceux ignorés 							// par .gitignore)

vim git_ignore.sh	
i			
#!/bin/sh		// ou #!/bin/bash
enter
git ls-files -io --exclude-standard
echap			
:wq			
enter

chmod +x git_ignore.sh
bash git_ignore.sh | cat -e

rm .DS_Store			
rm mywork.c
rm mywork.c~
rm .gitignore
rm -r .git
